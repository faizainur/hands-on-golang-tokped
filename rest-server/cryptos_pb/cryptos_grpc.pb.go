// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: cryptos.proto

package cryptos_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CryptosServiceClient is the client API for CryptosService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CryptosServiceClient interface {
	EncryptData(ctx context.Context, in *CryptoRequest, opts ...grpc.CallOption) (*CryptoResponse, error)
	DecryptData(ctx context.Context, in *CryptoRequest, opts ...grpc.CallOption) (*CryptoResponse, error)
}

type cryptosServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCryptosServiceClient(cc grpc.ClientConnInterface) CryptosServiceClient {
	return &cryptosServiceClient{cc}
}

func (c *cryptosServiceClient) EncryptData(ctx context.Context, in *CryptoRequest, opts ...grpc.CallOption) (*CryptoResponse, error) {
	out := new(CryptoResponse)
	err := c.cc.Invoke(ctx, "/Cryptos.CryptosService/EncryptData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptosServiceClient) DecryptData(ctx context.Context, in *CryptoRequest, opts ...grpc.CallOption) (*CryptoResponse, error) {
	out := new(CryptoResponse)
	err := c.cc.Invoke(ctx, "/Cryptos.CryptosService/DecryptData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CryptosServiceServer is the server API for CryptosService service.
// All implementations must embed UnimplementedCryptosServiceServer
// for forward compatibility
type CryptosServiceServer interface {
	EncryptData(context.Context, *CryptoRequest) (*CryptoResponse, error)
	DecryptData(context.Context, *CryptoRequest) (*CryptoResponse, error)
	mustEmbedUnimplementedCryptosServiceServer()
}

// UnimplementedCryptosServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCryptosServiceServer struct {
}

func (UnimplementedCryptosServiceServer) EncryptData(context.Context, *CryptoRequest) (*CryptoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncryptData not implemented")
}
func (UnimplementedCryptosServiceServer) DecryptData(context.Context, *CryptoRequest) (*CryptoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecryptData not implemented")
}
func (UnimplementedCryptosServiceServer) mustEmbedUnimplementedCryptosServiceServer() {}

// UnsafeCryptosServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CryptosServiceServer will
// result in compilation errors.
type UnsafeCryptosServiceServer interface {
	mustEmbedUnimplementedCryptosServiceServer()
}

func RegisterCryptosServiceServer(s grpc.ServiceRegistrar, srv CryptosServiceServer) {
	s.RegisterService(&CryptosService_ServiceDesc, srv)
}

func _CryptosService_EncryptData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptosServiceServer).EncryptData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cryptos.CryptosService/EncryptData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptosServiceServer).EncryptData(ctx, req.(*CryptoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptosService_DecryptData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptosServiceServer).DecryptData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cryptos.CryptosService/DecryptData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptosServiceServer).DecryptData(ctx, req.(*CryptoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CryptosService_ServiceDesc is the grpc.ServiceDesc for CryptosService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CryptosService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Cryptos.CryptosService",
	HandlerType: (*CryptosServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EncryptData",
			Handler:    _CryptosService_EncryptData_Handler,
		},
		{
			MethodName: "DecryptData",
			Handler:    _CryptosService_DecryptData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cryptos.proto",
}
